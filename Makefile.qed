PACKAGE_NAME=qed
VERSION=Git-$(VERSIONBUILD)
VERSIONPATCH=-mint-macos
SOURCE_DIR=$(BUILD_DIR)/$(PACKAGE_NAME)-$(VERSION)
COMPIL_DIR=$(BUILD_DIR)/$(PACKAGE_NAME)-$(VERSION)$(VERSIONPATCH)-$(VERSIONBINCPU)
GIT_SRC=https://github.com/freemint/$(PACKAGE_NAME).git
ARCHIVE_SRC_FILE=
ARCHIVE_PATCH_FILE=$(PACKAGE_NAME)-Git$(VERSIONPATCH).patch.bz2
PACKAGE_FILE=$(PACKAGE_NAME)-$(VERSION)$(VERSIONPATCH)-$(VERSIONBIN)-$(VERSIONBUILD).tgz

BINARY_DIR=$(COMPIL_DIR)/binary-package
LOCAL_PREFIX_DIR=$(BINARY_DIR)

##########################################
.PHONY: all clean extract patch configure compile packaging install

all:		extract patch configure compile packaging install

clean:	
	rm -rf "$(COMPIL_DIR)"
	rm -rf "$(SOURCE_DIR)"
	rm -rf "$(PACKAGES_DIR)/$(PACKAGE_FILE)"


##########################################
extract:	$(SOURCE_DIR)

patch:		$(SOURCE_DIR)/_patch_$(PACKAGE_NAME)

configure:
	mkdir -p $(LOCAL_PREFIX_DIR)

compile:
	make --directory="$(SOURCE_DIR)" CROSS=yes all
	make --directory="$(SOURCE_DIR)" CROSS=yes install installdir=$(LOCAL_PREFIX_DIR)/qed

packaging:	$(PACKAGES_DIR)/$(PACKAGE_FILE)

install:	packaging
	@echo "No installation of application in $(dir $(PREFIX)), check content of $(LOCAL_PREFIX_DIR)/qed"


##########################################
# extract sources
$(SOURCE_DIR):
ifneq "$(ARCHIVE_SRC_FILE)" ""
	$(MAKE) FILE="$(ARCHIVE_SRC_FILE)" fetch
	tar xvjf "$(ARCHIVES_DIR)/$(ARCHIVE_SRC_FILE)" --directory "$(BUILD_DIR)"
endif
ifneq "$(GIT_SRC)" ""
	mkdir -p "$(dir $(SOURCE_DIR))"
	git clone --depth 1 $(GIT_SRC) $(SOURCE_DIR)/
endif


# apply patch to sources
$(SOURCE_DIR)/_patch_$(PACKAGE_NAME):
ifneq "$(VERSIONPATCH)" ""
	$(MAKE) FILE="$(ARCHIVE_PATCH_FILE)" fetch
	bzcat "$(ARCHIVES_DIR)/$(ARCHIVE_PATCH_FILE)" | patch -p1 --directory $(SOURCE_DIR) && touch "$(SOURCE_DIR)/_patch_$(PACKAGE_NAME)"
endif


# build distribution package
$(PACKAGES_DIR)/$(PACKAGE_FILE): compile
	tar cvzf "$@" --directory "$(dir $(LOCAL_PREFIX_DIR))" $(notdir $(LOCAL_PREFIX_DIR)) 
